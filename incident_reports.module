<?php
/**
 * @file
 * Code for the Incident Reports feature.
 */

include_once 'incident_reports.features.inc';


/**
 * Implements hook_menu().
 */
function incident_reports_menu() {
  $items = array();
  $items['incident-reports'] = array(
    'title' => 'Incident Reports (DRAFT)',
    'page callback' => '_incident_reports_page',
    'access arguments' => array('report an incident'),
  );
  $items['admin/config/incident-reports'] = array(
    'title' => 'Incident Reports Configuration',
    'description' => 'Configuration for Incident Reports',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_incident_reports_config_form'),
    'access arguments' => array('access administration pages'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function incident_reports_permission() {
  return array(
    'report an incident' => array(
      'title' => t('Report an Incident'),
    ),
    'view incident reports' => array(
      'title' => t('View Incident Reports'),
    ),
    'follow up on incident reports' => array(
      'title' => t('Follow up on Incident Reports'),
    ),
  );
}
/**
 * Implements hook_form_alter().
 */
function incident_reports_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'incident_report_node_form') {
    // Change labels for sci-rooms, hil-rooms, etc to just "Rooms"
    $language = $form['field_hil_rooms']['#language'];
    $form['field_hil_rooms'][$language]['#title'] = 'Room';

    $language = $form['field_sci_rooms']['#language'];
    $form['field_sci_rooms'][$language]['#title'] = 'Room';

    $language = $form['field_eng_rooms']['#language'];
    $form['field_eng_rooms'][$language]['#title'] = 'Room';

    $language = $form['field_south_gym_rooms']['#language'];
    $form['field_south_gym_rooms'][$language]['#title'] = 'Room';

    // Hide follow-up field from regular users.
    if (!user_access('follow up on incident reports')) {
      $language = $form['field_follow_up']['#language'];
      $form['field_follow_up'][$language][0]['value']['#type'] = 'hidden';
    }
  }
}

/**
 * Implements hook_node_access().
 */
function incident_reports_node_access($node, $op, $account) {
  // Only allow access for regular users if they created the incident report.
  $is_incident_report = isset($node->type) && $node->type == 'incident_report';
  $can_access_all_reports = user_access('view incident reports');
  global $user;
  $user_owns_content = isset($node->name) && $user->name == $node->name;
  $can_access_this_report = $can_access_all_reports || $user_owns_content;

  if ($is_incident_report && !$can_access_this_report) {
    return NODE_ACCESS_DENY;
  }
}

/**
 * Implements hook_node_presave().
 */
function incident_reports_node_presave($node) {
  // Clear rooms fields for buildings that are not selected.
  $is_incident_report = isset($node->type) && $node->type == 'incident_report';
  if ($is_incident_report) {
    $language = $node->language;
    $location = isset($node->field_location_of_incident[$language][0]['value']) ? $node->field_location_of_incident[$language][0]['value'] : '';

    if ($location != 'HIL') {
      $node->field_hil_rooms[$language][0]['value'] = '';
    }
    if ($location != 'SCI') {
      $node->field_sci_rooms[$language][0]['value'] = '';
    }
    if ($location != 'ENG') {
      $node->field_eng_rooms[$language][0]['value'] = '';
    }
    if ($location != 'GYM') {
      $node->field_south_gym_rooms[$language][0]['value'] = '';
    }
  }
}

/**
 * Implements hook_node_update().
 */
function incident_reports_node_update($node) {
  $is_incident_report = isset($node->type) && $node->type == 'incident_report';
  if ($is_incident_report) {
    _send_notification_email($node, 'update');
  }
}

/**
 * Implements hook_node_insert().
 */
function incident_reports_node_insert($node) {
  $is_incident_report = isset($node->type) && $node->type == 'incident_report';
  if ($is_incident_report) {
    _send_notification_email($node, 'create');
  }
}

/**
 * Custom page callback function for displaying incident reports (to those with permissions) and displaying a link to add a new incident report (for regular users).
 */
function _incident_reports_page() {
  drupal_add_css(drupal_get_path('module', 'incident_reports') . '/incident_reports.css');

  $output =  '<div class="alert alert-warning alert-dismissible" role="alert">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>

                <h2>What is an incident?</h2>
                <p>In this context an incident is an event that:</p>
                <ul>
                  <li>Required staff  support from another unit outside the Libraries to ensure smooth and efficient library operations</li>
                  <li>Required an unusual response from within the libraries in order to ensure smooth and efficient library operations</li>
                </ul>

                <p>Incidents may involve calling UNB Security, Facilities Management, or 911.<?p>

                <h2>What is the purpose of incident reporting?</h2>

                <p>Incidents must be reported in order to:</p>
                <ul>
                  <li>Prevent a similar or more serious situation from happening again </li>
                  <li>Ensure that appropriate follow-up is undertaken</li>
                  <li>Ensure that staff responsible for those working and studying in the building are aware of situations needing attention</li>
                </ul>

                <h2>Do I have to report an incident?</h2>

                <p>Yes, it is your responsibility to submit an incident report as soon as you are free to do so.</p>

                <h2>What happens to my submitted report?</h2>

                <p>Your report is sent to two people:</p>
                <ul>
                  <li>The Assistant Director of Libraries for Finances & Facilities</li>
                  <li>The Associate Director of Libraries for Learning & Research Services</li>
                </ul>
              </div>';

  $output .= '<a href="/node/add/incident-report" class="report-link btn btn-default">Report an incident</a>';

  if (user_access('view incident reports')) {
    $output .= views_embed_view('incident_reports', 'block_1');
  }
  else {
    $num_incidents = count(views_get_view_result('incident_reports', 'block_2'));
    $output .= $num_incidents > 0 ? "<h2>Previously Reported Incidents</h2>" : '';
    $output .= views_embed_view('incident_reports', 'block_2');
  }
  return $output;
}

/**
 * Implements hook_node_view().
 */
function incident_reports_node_view($node, $view_mode, $langcode) {
  // Hide follow up field from regular users.
  $is_incident_report = isset($node->type) && $node->type == 'incident_report';
  $can_view_follow_up = user_access('follow up on incident reports');
  if ($is_incident_report && !$can_view_follow_up) {
    if (isset($node->content['field_follow_up'])) {
      unset($node->content['field_follow_up']);
    }
  }
}

/**
 * Page callback for Incident Reports configuration form.
 */
function _incident_reports_config_form($form, &$form_state) {
  $form['incident_reports_notifees'] = array(
    '#type' => 'textfield',
    '#title' => t('Users to be notified of new/edited incident reports'),
    '#description' => t('Please include login IDs for each user to be notified. Separate login IDs by commas.'),
    '#default_value' => variable_get('incident_reports_notifees'),
    '#size' => 100,
    '#maxlength' => 250,
  );
  return system_settings_form($form);
}

/**
 * Generates notification email when incident report is created or edited.
 */
function _send_notification_email($node, $action) {
  $users_to_notify = variable_get('incident_reports_notifees');
  global $user;
  // If no notifees set, no need to send an email.
  if ($users_to_notify == '') {
    return;
  }
  // Strip out invalid usernames and username of user who created/updated incident report.
  $users_to_notify = array_filter(
    explode(',', $users_to_notify),
    function($elem) {
      if (!user_load_by_name(trim($elem))) {
        return false;
      }
      if ($user->name == trim($elem)) {
        return false;
      }
      return true;
    }
  );

  $nid = $node->nid;
  $title = $node->title;

  switch ($action) {
    case 'create':
      $subject = 'A new incident report has been created';
      $message = 'A new incident report, "' . $title . '", has been created.';
    break;

    case 'update':
      $subject = 'An incident report has been updated';
      $message = 'An incident report, "' . $title . '", has been updated.';
    break;

    default:
      return;
    break;
  }

  $message .= "\nView this incident report at http://staff.lib.unb.ca/node/" . $nid;
  foreach ($users_to_notify as $user) {
    $headers = "From: libsystems@unb.ca\r\n" .
              "Reply-To: libsystems@unb.ca\r\n" .
              'X-Mailer: PHP/' . phpversion();
    mail($user . '@unb.ca', $subject, $message, $headers);
  }
}
